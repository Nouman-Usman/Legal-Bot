//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                  String             @id() @default(uuid())
  name                String?
  email               String?            @unique()
  pictureUrl          String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation     String?
  stripeCustomerId    String?
  status              UserStatus         @default(VERIFIED)
  globalRole          String             @default("USER")
  /// @password
  /// @omit
  password            String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @default(now()) @updatedAt()
  organizationRoles   OrganizationRole[]
  lawyerProfiles      LawyerProfile[]    @relation("user")
  casesAsClient       Case[]             @relation("client")
  caseNotesAsAuthor   CaseNote[]         @relation("author")
  messagesAsSender    Message[]          @relation("sender")
  messagesAsReceiver  Message[]          @relation("receiver")
  documentsAsUploader Document[]         @relation("uploader")
}

/// @@allow('all', true)
model LawyerProfile {
  id                String   @id() @default(uuid())
  licenseNumber     String?
  barAssociation    String?
  yearsOfExperience Float?
  specialties       String?
  profilePictureUrl String?
  userId            String
  user              User?    @relation(fields: [userId], references: [id], name: "user")
  cases             Case[]   @relation("lawyerProfile")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Case {
  id              String         @id() @default(uuid())
  caseNumber      String?
  title           String?
  description     String?
  status          String?
  startDate       String?
  endDate         String?
  lawyerProfileId String
  lawyerProfile   LawyerProfile? @relation(fields: [lawyerProfileId], references: [id], name: "lawyerProfile")
  clientId        String
  client          User?          @relation(fields: [clientId], references: [id], name: "client")
  invoices        Invoice[]      @relation("case")
  caseNotes       CaseNote[]     @relation("case")
  messages        Message[]      @relation("case")
  documents       Document[]     @relation("case")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Invoice {
  id        String   @id() @default(uuid())
  amount    String?
  issueDate String?
  dueDate   String?
  status    String?
  details   String?
  caseId    String
  case      Case?    @relation(fields: [caseId], references: [id], name: "case")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model CaseNote {
  id          String   @id() @default(uuid())
  noteContent String?
  createdDate String?
  caseId      String
  case        Case?    @relation(fields: [caseId], references: [id], name: "case")
  authorId    String
  author      User?    @relation(fields: [authorId], references: [id], name: "author")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Message {
  id         String   @id() @default(uuid())
  content    String?
  timestamp  String
  senderId   String
  sender     User?    @relation(fields: [senderId], references: [id], name: "sender")
  receiverId String
  receiver   User?    @relation(fields: [receiverId], references: [id], name: "receiver")
  caseId     String
  case       Case?    @relation(fields: [caseId], references: [id], name: "case")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Document {
  id          String   @id() @default(uuid())
  documentUrl String?
  description String?
  uploadDate  String?
  caseId      String
  case        Case?    @relation(fields: [caseId], references: [id], name: "case")
  uploaderId  String
  uploader    User?    @relation(fields: [uploaderId], references: [id], name: "uploader")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id               String             @id() @default(uuid())
  name             String
  pictureUrl       String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt()
  roles            OrganizationRole[]
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}
